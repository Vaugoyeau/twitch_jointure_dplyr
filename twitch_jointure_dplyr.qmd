---
title: "Jointure de tables avec `{dplyr}`"
author: "Marie Vaugoyeau"
date: "2024/06/25"
date-format: "D MMMM YYYY"
format: 
  pdf:
    toc: true
    number-sections: true
    papersize: letter
execute: 
  warning: false
---

# Les données  
## Import des packages  
```{r}
library(tidyverse)
```

## Température quotidienne  
Les données sont [les températures quotidiennes départementales](https://www.data.gouv.fr/fr/datasets/temperature-quotidienne-departementale-depuis-janvier-2018/) 

```{r}
# import des données
temperature <- read_delim("
", delim = ";")

# ajout mois et année
temperature <- read_delim("https://www.data.gouv.fr/fr/datasets/r/dd0df06a-85f2-4621-8b8b-5a3fe195bcd7", delim = ";") |>
  mutate(
    mois = month(date_obs),
    annee = year(date_obs)
  )
  
# calcul des valeurs mensuelles
temperature <- read_delim("https://www.data.gouv.fr/fr/datasets/r/dd0df06a-85f2-4621-8b8b-5a3fe195bcd7", delim = ";") |>
  mutate(
    mois = month(date_obs),
    annee = year(date_obs)
  ) |> 
  group_by(departement, mois, annee) |> 
  summarise(
    tmin = min(tmin, na.rm = TRUE),
    tmax = max(tmax, na.rm = TRUE),
    tmoy = mean(tmoy, na.rm = TRUE)
  ) |> 
  ungroup()
```


## Densité de population par départements  
Ainsi que les [données de densités par départements](https://www.insee.fr/fr/statistiques/6683035?sommaire=6683037).  
```{r}

download.file("https://www.insee.fr/fr/statistiques/fichier/6683035/ensemble.zip", destfile = "data_raw/insee.zip", mode = "wb") 

unzip("data_raw/insee.zip",exdir = "data_raw")

info_departement <- read_delim("data_raw/donnees_departements.csv", delim =";")

file.remove("data_raw/insee.zip")
```


# Concaténation de tables  
## Pourquoi ?  
Pour coupler des informations présentes dans différentes tables pour explorer le lien, par exemple les variations de températures en fonction de la densité de population.  
  
## Problème  
Pour que les jointures se passent bien, il faut que les informations présentes dans une table correspondent à celles présentes dans l'autre !  
  
## Différents types de jointures  
Prenons deux tables :   
```{r}
(A <- tibble(
  id = letters[1:3],
  w = c(5, 9, 7),
  x= c(1, 4, 8)
))


(B <- tibble(
  id = letters[c(1, 2, 4)],
  y = c(4, 7, 6),
  z = c(2, 8, 6)
  ) 
)

```
  
On veut avoir les informations `r letters[23:26]` pour tous les individus -> **jointure totale** avec `full_join()` de `{dplyr}`  
  
```{r}
full_join(A, B)
```
 
On veut que les lignes des individus présents dans les deux tableaux -> **jointure interne** avec `inner_join()` de `{dplyr}`  
```{r}
inner_join(A, B)
```
  
On veut toutes les caractéristiques disponibles pour les individus d'une des deux tables -> **jointure à gauche** ou **à droite** avec `left_join()` et `right_join()` de `{dplyr}`. Le sens de la jointure a une influence dans l'ordre des tables mais fait la même chose si on inverse l'ordre, seules les colonnes ne seront pas dans le même ordre.  
  

::: callout-note
## Pour réorganiser les colonnes  

Il est possible d'utiliser la fonction `relocate()` du package `{dplyr}`.  
:::   
  
```{r}
left_join(A, B)
right_join(B, A)

# réorganisation des colonnes
right_join(B, A) |> 
  relocate(id, letters[23:26])

left_join(B, A)

# réorganisation des colonnes
left_join(B, A) |> 
  relocate(letters[23:26], .after = id)

right_join(A, B)

```

On veut les individus qui ne sont pas présent dans l'autre table -> **anti-jointure** avec `anti_join()` de `{dplyr}`.  
L'ordre à son importance, ce sont les individus de la première table qui ne sont pas présent dans la deuxième qui sortent.  
```{r}
anti_join(A, B)

anti_join(B, A)
```


# Préparation des données en amont 
## Identification de la clé de jointure  
Si pas défaut les fonctions prennent comme clé de jointure les colonnes qui ont le même nom, ce n'est pas nécessairement ce que l'on veut obtenir.  
La clé peut être basé sur une ou plusieurs colonnes.  
  
```{r}
glimpse(info_departement)
glimpse(temperature)
```
  
Ici : `DEP` == `departement`    
  
## Même type d'objets  
Les données doivent-être de même type donc la vérification de la classe des clés est indispensable.  
```{r}
class(info_departement$DEP) == class(temperature$departement)
```
  
## Présence de doublons  
La détection des doublons se fait facilement grâce à la fonction `count()` de `{dplyr}`.  
```{r}
info_departement |> 
  count(DEP) |> 
  arrange(n)

temperature |> 
  count(departement) |> 
  filter(n != 77)

```


## Présence de valeurs manquantes  
L'utilisation conjuguée de la fonction `is.na()` du package `{base}` dans la fonction `filter()` de `{dplyr}` permet de trier facilement les lignes avec des valeurs manquantes.  
```{r}
info_departement |> 
  filter(is.na(DEP))

temperature |> 
  filter(is.na(departement))

```

Ce n'est pas nécessairement un problème **d'avoir des doublons** ou **des valeurs manquantes** mais il faut que cela correspondent à ce que l'on souhaite faire.  
  
# Jointure total avec `full_join()` 
## Réalisation de la jointure  
```{r}
jointure_total <- full_join(
  info_departement,
  temperature,
  by = join_by(DEP == departement)
  )

```
  
## Vérification de la table crée  
Calcul de la taille attendue  
```{r}

dim(info_departement)
dim(temperature)

# calcul du nombre de colonnes attendue
ncol(info_departement) + ncol(temperature) - 1 == ncol(jointure_total)

# vérification du nombre de lignes
nrow(temperature) == nrow(jointure_total)

```
  
## Recherche des `NA`  
```{r}
jointure_total |> 
  filter(is.na(CODREG))

jointure_total |> 
  filter(is.na(mois)) |> 
  View()

```

## Utilisation de l'anti-jointure  
Possibilité d'utiliser l'anti-jointure pour identifier les lignes à problème  
```{r}

anti_join(
  info_departement,
  temperature,
  by = join_by(DEP == departement)
)

anti_join(
  temperature,
  info_departement,
  by = join_by(departement == DEP)
)

```
  
# Jointure interne avec `inner_join()`  
## Création de la jointure la plus stricte  
```{r}
jointure_interne <- inner_join(
  info_departement,
  temperature,
  by = join_by(DEP == departement)
)

# même résultat avec la jointure à droite
jointure_a_droite <- right_join(
  info_departement,
  temperature,
  by = join_by(DEP == departement)
)

# vérification  
identical(jointure_a_droite, jointure_interne)

```
  
## Vérification de la jointure interne  
```{r}

jointure_a_droite |> 
  count(DEP) |> 
  filter(n != 77)

```
  

